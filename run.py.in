#!/usr/bin/env python3

import argparse as ap
from collections import defaultdict
import os
import re
import sys
import shutil
import subprocess
from tabulate import tabulate

############################
# PATHS (NOTE: Update these with correct local paths if necessary!)
############################
AS_PATH = os.path.join("${LLVM_TOOLS_BINARY_DIR}", "llvm-as")
LLVM_AS_CMD=AS_PATH + " {} -o {}"
SCRIPT_PATH = os.path.abspath(os.path.dirname(sys.argv[0]))
# solidity paths
SOLANG_PATH=os.path.join("./solang")
SOLIDITY_PREPROCESSOR_PATH=os.path.join(SCRIPT_PATH, "deps", "SolidityPreprocessor", "src", "preprocessor.js")
SOLIDITY_SUMMARIZER_PATH=os.path.join(SCRIPT_PATH, "deps", "SolidityPreprocessor", "src", "summarizer.js")
# Rust paths
CARGO_PATH = os.path.join("cargo")
RUST_PREPROCESSOR_PATH=os.path.join(SCRIPT_PATH, "deps", "RustPreprocessor", "summarizer.py")
TOML_PATH = os.path.join("Cargo.toml")
CARGO_TARGET_PATH = os.path.join("target", "debug", "deps")
# Output path
OUT_DIR=os.path.join(os.getcwd(), "processed_examples")
VANGUARD_BUILD_PATH = os.path.join("${PROJECT_BINARY_DIR}", "lib")
VANGUARD_EXEC = os.path.join(VANGUARD_BUILD_PATH, "Vanguard")

############################
# Detectors
############################
DETECTORS = ["statGen", "fnPrinter", "reentrancyBasic", "irValidator"]

############################
# Subprocess Commands
############################
VANGUARD_CMD = "{} --detectors {{}} --summary {{}} {{}}".format(VANGUARD_EXEC)
# solidity commands
IR_SOLANG_CMD="{} --target ewasm --emit llvm-ir -o {{}} {{}}".format(SOLANG_PATH)
BC_SOLANG_CMD="{} --target ewasm --emit llvm-bc -o {{}} {{}}".format(SOLANG_PATH)
SOLIDITY_PREPROCESSOR_CMD="node {} {{}}".format(SOLIDITY_PREPROCESSOR_PATH)
SOLIDITY_SUMMARIZER_CMD="node {} {{}}".format(SOLIDITY_SUMMARIZER_PATH)
# Rust commands
IR_CARGO_CMD="{} rustc -- --emit llvm-ir".format(CARGO_PATH)
BC_CARGO_CMD="{} rustc -- --emit llvm-bc".format(CARGO_PATH)
CARGO_SUMMARY_CMD="{} +nightly contract build".format(CARGO_PATH)
RUST_PREPROCESSOR_CMD="python3 {} {{}}".format(RUST_PREPROCESSOR_PATH)

############################
# Extensions
############################
solidity_exts = ["sol"]
rust_exts = ["rs"]

def get_per_func_info(s: str):
    patt = re.compile("(Function '([^']*)' [^\n]*)")
    matches = patt.findall(s)

    return matches

def preprocess_file(args, lang, ext):
    file_name = os.path.basename(args.src_path)

    if lang == "solidity":
        # Generate summarizer command
        summarizer_cmd = SOLIDITY_SUMMARIZER_CMD.format(args.src_path,OUT_DIR)

        # Run summarizer and save result to json
        summary_name = file_name.replace(".{}".format(ext), "_summary.json")
        summary_path = os.path.join(OUT_DIR, summary_name)
        with open(summary_path, "wb") as f:
            print("Running solidity summarizer...", end="")
            summary = subprocess.check_output(summarizer_cmd.split(), stderr=subprocess.DEVNULL)
            f.write(summary)
            print("Completed solidity summarizer, summary at {}.".format(summary_path))

        # Generate preprocessor command
        preprocessor_cmd = SOLIDITY_PREPROCESSOR_CMD.format(args.src_path,OUT_DIR)

        # Run preprocessor and save result to json
        preprocessed_name = file_name.replace(".{}".format(ext), "_instrumented.{}".format(ext))
        preprocessed_path = os.path.join(OUT_DIR, preprocessed_name)
        with open(preprocessed_path, "wb") as f:
            print("Running solidity preprocessor...", end="")
            preprocessed = subprocess.check_output(preprocessor_cmd.split(), stderr=subprocess.DEVNULL)
            f.write(preprocessed)
            print("Completed solidity preprocessor, preprocessed version at {}.".format(preprocessed_path))

        # Generate commandline command for Solang
        solang_cmd = BC_SOLANG_CMD.format(OUT_DIR, preprocessed_path)

        # Run solang
        print("Running Solang...", end="")
        subprocess.check_output(solang_cmd.split(), stderr=subprocess.DEVNULL)
        print("Completed Solang, compiled files in folder at {}".format(OUT_DIR))
        if args.create_ir:
            print("Running Solang to create IR (becaue --create_ir used!)...", end="")
            solang_ir_cmd = IR_SOLANG_CMD.format(OUT_DIR, args.src_path)
            subprocess.check_output(solang_ir_cmd.split(), stderr=subprocess.DEVNULL)
            print("Completed Solang, IR files in folder at {}".format(OUT_DIR))
    elif lang == "rust":
        # Generate commandline command for Cargo
        dirname = os.path.dirname(args.src_path)
        cwd = os.getcwd()
        os.chdir(dirname)

        # Run cargo
        print("Running Cargo to create IR (becaue --create_ir used!)...", end="")
        cargo_ir_cmd = IR_CARGO_CMD.format(file_name)
        subprocess.check_output(cargo_ir_cmd.split(), stderr=subprocess.DEVNULL)
        for f in os.listdir(CARGO_TARGET_PATH):
            # Copy ll files into processed folder
            if f.endswith(".ll"):
                fpath = os.path.join(CARGO_TARGET_PATH, f)
                tpath = os.path.join(OUT_DIR, f)
                shutil.copy(fpath, tpath)
                llvm_as_cmd = LLVM_AS_CMD.format(tpath, os.path.join(OUT_DIR, f.replace(".ll", "_deploy.bc")))
                subprocess.check_output(llvm_as_cmd.split(), stderr=subprocess.DEVNULL)
        print("Completed Cargo, compiled files in folder in {}".format(OUT_DIR))
        if args.create_ir:
            print("Completed Cargo, IR files in folder at {}".format(OUT_DIR))

        # Run cargo to generate metadata summary
        print("Running cargo to generate metadata...", end="")
        cargo_summary_cmd = CARGO_SUMMARY_CMD.format(file_name)
        subprocess.check_output(cargo_summary_cmd.split(), stderr=subprocess.DEVNULL)
        print("Completed metadata generation, available at target/ink/metadata.json.")

        # Generate preprocessor command
        preprocessor_cmd = RUST_PREPROCESSOR_CMD.format(os.path.join("target", "ink", "metadata.json"))

        # Run preprocessor and save result to json
        summary_name = file_name.replace(".{}".format(ext), "_summary.json")
        summary_path = os.path.join(OUT_DIR, summary_name)
        with open(summary_path, "wb") as f:
            print("Running rust preprocessor...", end="")
            summary = subprocess.check_output(preprocessor_cmd.split(), stderr=subprocess.DEVNULL)
            f.write(summary)
            print("Completed Rust preprocessor, summary at {}.".format(summary_path))

        os.chdir(cwd)

    return summary_path

def run_detector(detector, summary_path):
    # Run detector!
    lib = None
    for f in os.listdir(VANGUARD_BUILD_PATH):
        # Get right libVanguard (dylib vs. so)
        if f in ["libVanguard.so", "libVanguard.dylib"]:
            lib = f
    results = {}
    for bc_file in os.listdir(OUT_DIR):
        if bc_file.endswith("_deploy.bc"):
            # Only process bc files
            class_name = bc_file.replace("_deploy.bc", "")
            bc_path = os.path.join(OUT_DIR, bc_file)
            vanguard_cmd = VANGUARD_CMD.format(detector, summary_path, bc_path)
            #print(vanguard_cmd)
            print("Running Vanguard on class {}...".format(class_name), end="")
            tout = bytes.decode(subprocess.check_output(vanguard_cmd.split(), stderr=subprocess.DEVNULL))
            print("Completed Vanguard.")
            results[class_name] = tout

    return results

#def print_results(results):
#    out = [["Class", "Detector", "Function Flagged by Detector", "Detailed Output"]]
#    for cls, ress in results.items():
#        for info in ress:
#            detector, res = info
#            parsed_res = get_per_func_info(res)
#            for note, func in parsed_res:
#                simple_func = func.split("::")[-1].split("__")[0]
#                row = [cls, detector, simple_func, note]
#                out.append(row)

#    print(tabulate(out, tablefmt="grid"))

def print_results(results):
    out = [["Class", "Detector", "Function Flagged by Detector", "Detailed Output"]]
    for cls, ress in results.items():
        for info in ress:
            detector, res = info
            print("--------- {} ---------".format(detector))
            print(res)

def run(args):
    if os.path.exists(OUT_DIR):
        # Remove existing processed files
        shutil.rmtree(OUT_DIR)
    # Make output directory
    os.makedirs(OUT_DIR)

    assert args.src_path != None, "No source path given (with --src_path arg)!"
    assert os.path.exists(args.src_path), "Source path {} does not exist!".format(args.src_path)
    assert args.detector != None, "No detector given (with --detector arg)!"
    assert args.detector in DETECTORS or args.detector=='all', "{} is not a recognized detector (check DETECTORS at top of run.py)!".format(args.detector)

    ext = os.path.basename(args.src_path).split(".")[-1]
    assert ext in solidity_exts or ext in rust_exts, "File extension {} not recognized for rust or solidity!".format(ext)

    if ext in solidity_exts:
        lang = "solidity"
    elif ext in rust_exts:
        lang = "rust"

    if args.detector == 'all':
        detectors = DETECTORS
    else:
        detectors = [args.detector]

    print("----Preprocessing {}----".format(args.src_path))
    summary_path = preprocess_file(args, lang, ext)

    results = defaultdict(list)
    for detector in detectors:
        print("----Running {} with {} detector----".format(args.src_path, detector))
        detector_results = run_detector(detector, summary_path)
        for cls, res in detector_results.items():
            results[cls].append((detector, res))

    print("----VANGUARD REPORT----")
    print_results(results)

if __name__=="__main__":
    parser = ap.ArgumentParser()
    parser.add_argument("--src_path", help="path to program to run (default is None)", type=str, default=None)
    parser.add_argument("--detector", help="choose benchmark to curate (default is None, 'all' will run all detectors)", type=str, default=None)
    parser.add_argument("--create_ir", help="enables output of ir in addition to bc files", action="store_true")
    args = parser.parse_args()
    run(args)
